#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: X64ËΩØË∑ØÁî±-UEFI

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v24.10.3
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Êü•Áúã
      uses: actions/checkout@v5
      
    - name: Ê£ÄÊü•ÊúçÂä°Âô®ÊÄßËÉΩ
      run: |
        echo "Ë≠¶Âëä‚ö†"
        echo "ÂàÜÈÖçÁöÑÊúçÂä°Âô®ÊÄßËÉΩÊúâÈôêÔºåËã•ÈÄâÊã©ÁöÑÊèí‰ª∂ËøáÂ§öÔºåÂä°ÂøÖÊ≥®ÊÑèCPUÊÄßËÉΩÔºÅ"
        echo -e "Â∑≤Áü•CPUÂûãÂè∑ÔºàÈôçÂ∫èÔºâÔºö7763Ôºå8370CÔºå8272CLÔºå8171MÔºåE5-2673 \n"
        echo "--------------------------CPU‰ø°ÊÅØ--------------------------"
        echo "CPUÁâ©ÁêÜÊï∞ÈáèÔºö$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPUÊ†∏ÂøÉ‰ø°ÊÅØÔºö$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------ÂÜÖÂ≠ò‰ø°ÊÅØ--------------------------"
        echo "Â∑≤ÂÆâË£ÖÂÜÖÂ≠òËØ¶ÁªÜ‰ø°ÊÅØÔºö"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------Á°¨Áõò‰ø°ÊÅØ--------------------------"
        echo "Á°¨ÁõòÊï∞ÈáèÔºö$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
      
    - name: ÈáäÊîæÁ£ÅÁõòÁ©∫Èó¥
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
    - name: Ê∏ÖÁêÜÂâç
      run: |
        set -xe
        df -H

    - name: Ê∏ÖÁêÜ‰∏≠
      run: |
        set -xe
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/share/swift
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /opt/hostedtoolcache/
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules
        sudo docker image prune --all --force
        
        APT_PARAMS='sudo apt -y -qq -o=Dpkg::Use-Pty=0'
        $APT_PARAMS remove -y '^dotnet-.*'
        $APT_PARAMS remove -y '^llvm-.*'
        $APT_PARAMS remove -y '^php.*'
        $APT_PARAMS remove -y '^mongodb-.*'
        $APT_PARAMS remove -y '^mysql-.*'
        $APT_PARAMS remove -y azure-cli google-* google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri
        $APT_PARAMS autoremove --purge -y
        $APT_PARAMS autoclean
        $APT_PARAMS clean

    - name: Ê∏ÖÁêÜÂêé
      run: |
        set -xe
        df -H
        
    - name: ÂàùÂßãÂåñÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: ÂÖãÈöÜÊ∫ê‰ª£Á†Å
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Ê∑ªÂä†ÁºìÂ≠ò
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Âä†ËΩΩËá™ÂÆö‰πâ feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Êõ¥Êñ∞ feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: ÂÆâË£Ö feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Âä†ËΩΩËá™ÂÆö‰πâÈÖçÁΩÆ
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: ‰∏ãËΩΩ package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: ÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Ê£ÄÊü•Á©∫Èó¥‰ΩøÁî®ÊÉÖÂÜµ
      if: (!cancelled())
      run: df -hT

    - name: ‰∏ä‰º† bin ÁõÆÂΩï
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Êï¥ÁêÜÊñá‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: ‰∏ä‰º†Âõ∫‰ª∂ÁõÆÂΩï
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: ÁîüÊàêÂèëÂ∏ÉÊ†áÁ≠æ
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "üîó [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: ‰∏ä‰º†Âõ∫‰ª∂Âπ∂ÂèëÂ∏É
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
